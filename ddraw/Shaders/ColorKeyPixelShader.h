// Automatically generated header file

#pragma once

/*
===== HLSL Source =====
sampler2D TextureSampler : register(s0); // Declare the sampler
float4 ColorKeyLow : register(c0);       // Declare the color key low constant
float4 ColorKeyHigh : register(c1);      // Declare the color key high constant

float4 main(float2 texCoords : TEXCOORD) : COLOR
{
	// Sample the texture
	float4 texColor = tex2D(TextureSampler, texCoords);

	// Check if the texel color is within the color key range
	if (all(texColor.rgb >= ColorKeyLow.rgb && texColor.rgb <= ColorKeyHigh.rgb))
	{
	    // Discard pixels within the color key range
	    discard;
	}

	// Output the texture color
	return texColor;
}
=======================
*/

const unsigned char ColorKeyPixelShaderSrc[] = {
0x0, 0x2, 0xff, 0xff, 0xfe, 0xff, 0x38, 0x0, 0x43, 0x54, 0x41, 0x42, 0x1c, 0x0, 0x0, 0x0, 
0xab, 0x0, 0x0, 0x0, 0x0, 0x2, 0xff, 0xff, 0x3, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x0, 
0x0, 0x1, 0x0, 0x0, 0xa4, 0x0, 0x0, 0x0, 0x58, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 
0x1, 0x0, 0x6, 0x0, 0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x0, 0x0, 0x0, 
0x2, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x84, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x94, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x48, 0x69, 0x67, 0x68, 
0x0, 0xab, 0xab, 0xab, 0x1, 0x0, 0x3, 0x0, 0x1, 0x0, 0x4, 0x0, 0x1, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x77, 0x0, 
0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x0, 0xab, 
0x4, 0x0, 0xc, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x70, 0x73, 0x5f, 0x32, 0x5f, 0x30, 0x0, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 
0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4c, 0x53, 0x4c, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 
0x20, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x20, 0x39, 0x2e, 0x32, 0x39, 0x2e, 0x39, 
0x35, 0x32, 0x2e, 0x33, 0x31, 0x31, 0x31, 0x0, 0x51, 0x0, 0x0, 0x5, 0x2, 0x0, 0xf, 0xa0, 
0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x1f, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x3, 0xb0, 0x1f, 0x0, 0x0, 0x2, 
0x0, 0x0, 0x0, 0x90, 0x0, 0x8, 0xf, 0xa0, 0x42, 0x0, 0x0, 0x3, 0x0, 0x0, 0xf, 0x80, 
0x0, 0x0, 0xe4, 0xb0, 0x0, 0x8, 0xe4, 0xa0, 0x2, 0x0, 0x0, 0x3, 0x1, 0x0, 0x7, 0x80, 
0x0, 0x0, 0xe4, 0x81, 0x1, 0x0, 0xe4, 0xa0, 0x58, 0x0, 0x0, 0x4, 0x1, 0x0, 0x7, 0x80, 
0x1, 0x0, 0xe4, 0x80, 0x2, 0x0, 0x0, 0xa0, 0x2, 0x0, 0x55, 0xa0, 0x2, 0x0, 0x0, 0x3, 
0x2, 0x0, 0x7, 0x80, 0x0, 0x0, 0xe4, 0x80, 0x0, 0x0, 0xe4, 0xa1, 0x58, 0x0, 0x0, 0x4, 
0x1, 0x0, 0x7, 0x80, 0x2, 0x0, 0xe4, 0x80, 0x1, 0x0, 0xe4, 0x80, 0x2, 0x0, 0x55, 0xa0, 
0x5, 0x0, 0x0, 0x3, 0x1, 0x0, 0x1, 0x80, 0x1, 0x0, 0x55, 0x80, 0x1, 0x0, 0x0, 0x80, 
0x5, 0x0, 0x0, 0x3, 0x1, 0x0, 0x1, 0x80, 0x1, 0x0, 0xaa, 0x80, 0x1, 0x0, 0x0, 0x80, 
0x1, 0x0, 0x0, 0x2, 0x1, 0x0, 0xf, 0x80, 0x1, 0x0, 0x0, 0x81, 0x41, 0x0, 0x0, 0x1, 
0x1, 0x0, 0xf, 0x80, 0x1, 0x0, 0x0, 0x2, 0x0, 0x8, 0xf, 0x80, 0x0, 0x0, 0xe4, 0x80, 
0xff, 0xff, 0x0, 0x0
};
